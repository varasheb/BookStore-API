{
    "openapi": "3.0.0",
    "info": {
      "title": "BookStore Application",
      "version": "1.0.0",
      "description": "Welcome to the API documentation for the Bookstore Application. This API provides a comprehensive set of endpoints for managing a digital bookstore, including user registration and authentication, book management, cart operations, wishlist functionalities, order processing, and user address handling."
    },
    "servers": [
      {
        "url": "http://localhost:3000",
        "description": "Local server"
      }
    ],
    "components": {
        "securitySchemes": {
          "BearerAuth": {
            "type": "http",
            "scheme": "bearer",
            "bearerFormat": "JWT"
          }
        }
      },
    "tags": [
      {
        "name": "Users",
        "description": "User management"
      },
      {
        "name": "Books",
        "description": "Book management"
      },
      {
        "name": "Cart",
        "description": "Cart management"
      },
      {
        "name": "Wishlist",
        "description": "Wishlist management"
      },
      {
        "name": "Orders",
        "description": "Order management"
      },
      {
        "name": "Address",
        "description": "Address management"
      }
    ],
    "paths": {
      "/users": {
        "post": {
          "tags": ["Users"],
          "summary": "Register a new user",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": { "type": "string" },
                    "email": { "type": "string" },
                    "mobile": { "type": "string" },
                    "password": { "type": "string" },
                    "role": { "type": "string" } 
                  },
                  "required": ["name", "email", "mobile", "password"]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "The user was successfully registered"
            },
            "400": {
              "description": "Invalid input"
            }
          }
        }
      },
      "/users/login": {
        "post": {
          "tags": ["Users"],
          "summary": "Log in a user",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "email": { "type": "string" },
                    "password": { "type": "string" }
                  },
                  "required": ["email", "password"]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successfully logged in"
            },
            "400": {
              "description": "Invalid input"
            }
          }
        }
      },
      "/users/forgotpassword": {
        "post": {
          "tags": ["Users"],
          "summary": "Send a password reset link",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "email": { "type": "string" }
                  },
                  "required": ["email"]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Password reset link sent"
            },
            "400": {
              "description": "Invalid input"
            }
          }
        }
      },
     "/users/resetpassword": {
      "post": {
        "tags": ["Users"],
        "summary": "Reset user password",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": { "type": "string" }
                },
                "required": ["password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password successfully reset"
          },
          "400": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
      "/books": {
        "post": {
          "tags": ["Books"],
          "summary": "Add a new book",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": { "type": "string" },
                    "author": { "type": "string" },
                    "price": { "type": "number" }
                  },
                  "required": ["title", "author", "price"]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Book successfully added"
            },
            "400": {
              "description": "Invalid input"
            }
          }
        },
        "get": {
          "tags": ["Books"],
          "summary": "Get all books",
          "responses": {
            "200": {
              "description": "A list of books"
            }
          }
        }
      },
      "/books/{id}": {
        "get": {
          "tags": ["Books"],
          "summary": "Get a book by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Book details"
            },
            "404": {
              "description": "Book not found"
            }
          }
        },
        "put": {
          "tags": ["Books"],
          "summary": "Update a book by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": { "type": "string" },
                    "author": { "type": "string" },
                    "price": { "type": "number" }
                  },
                  "required": ["title", "author", "price"]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Book successfully updated"
            },
            "404": {
              "description": "Book not found"
            }
          }
        },
        "delete": {
          "tags": ["Books"],
          "summary": "Delete a book by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Book successfully deleted"
            },
            "404": {
              "description": "Book not found"
            }
          }
        }
      },
      "/cart": {
        "get": {
          "tags": ["Cart"],
          "summary": "Get all items in the cart",
          "responses": {
            "200": {
              "description": "A list of items in the cart"
            }
          }
        }
      },
      "/cart/{id}": {
        "post": {
          "tags": ["Cart"],
          "summary": "Add an item to the cart",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Item successfully added to the cart"
            },
            "404": {
              "description": "Item not found"
            }
          }
        },
        "delete": {
          "tags": ["Cart"],
          "summary": "Remove an item from the cart",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Item successfully removed from the cart"
            },
            "404": {
              "description": "Item not found"
            }
          }
        }
      },
      "/wishlist": {
        "get": {
          "tags": ["Wishlist"],
          "summary": "Get the wishlist",
          "responses": {
            "200": {
              "description": "A list of items in the wishlist"
            }
          }
        }
      },
      "/wishlist/{id}": {
        "post": {
          "tags": ["Wishlist"],
          "summary": "Add an item to the wishlist",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Item successfully added to the wishlist"
            },
            "404": {
              "description": "Item not found"
            }
          }
        },
        "delete": {
          "tags": ["Wishlist"],
          "summary": "Remove an item from the wishlist",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Item successfully removed from the wishlist"
            },
            "404": {
              "description": "Item not found"
            }
          }
        }
      },
      "/orders": {
        "post": {
          "tags": ["Orders"],
          "summary": "Create a new order",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": { "type": "string" }
                    }
                  },
                  "required": ["items"]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Order successfully created"
            },
            "400": {
              "description": "Invalid input"
            }
          }
        },
        "get": {
          "tags": ["Orders"],
          "summary": "Get all orders",
          "responses": {
            "200": {
              "description": "A list of orders"
            }
          }
        }
      },
      "/address": {
        "post": {
          "tags": ["Address"],
          "summary": "Add a new address",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "street": { "type": "string" },
                    "city": { "type": "string" },
                    "state": { "type": "string" },
                    "zip": { "type": "string" }
                  },
                  "required": ["street", "city", "state", "zip"]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Address successfully added"
            },
            "400": {
              "description": "Invalid input"
            }
          }
        },
        "get": {
          "tags": ["Address"],
          "summary": "Get all addresses",
          "responses": {
            "200": {
              "description": "A list of addresses"
            }
          }
        }
      }
    }
  }
  